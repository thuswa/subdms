#!/usr/bin/env python
# $Id$
# Last modified Sat Mar 14 22:19:29 2009 on violator
# update count: 94
# -*- coding:  utf-8 -*-
#
# subdms - A document management system based on subversion.
# Copyright (C) 2009  Albert Thuswaldner
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from pysqlite2 import dbapi2 as sqlite
from optparse import OptionParser

import re
import string

from subdms import lowlevel

conf = lowlevel.dmsconfig()
docs = lowlevel.docname()

def command_output(cmd):
  " Capture a command's standard output. "
  import subprocess
  return subprocess.Popen(
      cmd.split(), stdout=subprocess.PIPE).communicate()[0]

def main():
  usage = """usage: %prog REPOS TXN
  #
  #Run pre-commit options on a repository transaction."""

  parser = OptionParser(usage=usage)
 
  (opts,(repos, rvn)) = parser.parse_args()

  # Search patterns for action selection
  newdocptrn = re.compile(conf.newdoc)
  newprojptrn = re.compile(conf.newproj)

  # Construct svnlook command 
  look_opt = "--revision"
  svn_look = "/usr/bin/svnlook"
  look_cmd = "%s %s %s %s %s" % (svn_look, "%s", repos, look_opt, rvn)
  look_cmd2 = "%s %s %s %s %s" % (svn_look, "propget", repos, "%s", "%s")
#  print look_cmd 

  # Get info about commit
  log_message = command_output(look_cmd % "log").rstrip("\n").rstrip()
  changed = command_output(look_cmd % "changed")
  docname = changed.split("/").pop().rstrip("\n").rstrip()

  if newprojptrn.match(log_message):
    # Create a connection to the database file
    con = sqlite.connect(conf.dbpath) #fixme
    cur = con.cursor()

    projname = log_message.split(": ")[-1]
    # Construct sql command string    
    db_str="insert into projlist(projname, doctypes) values(\"%s\", \"%s\")" \
            % (projname, string.join(conf.doctypes,","))
      
    # Excecute sql command
    cur.execute(db_str)
    con.commit()
   
  if docname:
    # create docname list
    docnamelist = docs.decons_docfname(docname)
    docurl = docs.const_docinrepopath(docnamelist)

    # Get author, date and other properties
    author = command_output(look_cmd % "author").rstrip("\n")
    date = command_output(look_cmd % "date").rstrip("\n")
    title = command_output(look_cmd2 % ("title", docurl))
    status = command_output(look_cmd2 % ("status", docurl))

    if newdocptrn.match(log_message):
      # Create a connection to the database file
      con = sqlite.connect(conf.dbpath) #fixme
      cur = con.cursor()
      f = open("./foo.txt", "a")
    
      writestr=[]
      writestr.extend(docnamelist)
      writestr.extend([title, date, status, author, log_message])
      f.write(rvn+string.join(writestr, ",")+"\n")
      f.close()
      # Construct sql command string
      db_str="insert into revlist(revnum, project, doctype, docno, docext, " \
              "doctitle, date, status, author, logtext) values(\"%s\", \"%s\")" \
              % (rvn, string.join(writestr, "\",\""))
      
      # Excecute sql command
      cur.execute(db_str)
      con.commit()

if __name__ == "__main__":
  import sys
  sys.exit(main())
